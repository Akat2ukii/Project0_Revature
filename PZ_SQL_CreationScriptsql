-- START OF SQL/PL SCRIPT FOR PROJECT ZERO --- 

DROP TABLE ACTIVITY_TYPE; 
DROP TABLE ACTIVITY; 
DROP TABLE BANK_ACCOUNT; 
DROP TABLE ACCOUNT_TYPE; 
DROP TABLE USR; 
DROP TABLE USER_TYPE; 

DROP SEQUENCE SQ_ACTIVITY_PK; 
DROP SEQUENCE SQ_BANK_ACCOUNT_PK;
DROP SEQUENCE SQ_USR_PK;

CREATE TABLE USR (
USR_ID INTEGER PRIMARY KEY, 
FIRSTNAME VARCHAR2(100), 
LASTNAME VARCHAR2(100), 
USERNAME VARCHAR2(100),   
PASSWORD VARCHAR2(100), 
USR_TYPE_ID INTEGER
); 
/


CREATE TABLE USR_TYPE ( 
USR_TYPE_ID INGTEGER PRIMARY KEY, 
USR_TYPE_NAME VARCHAR2(100)
); 
/

CREATE TABLE BANK_ACCOUNT ( 
BANK_ACCOUNT_ID INTEGER PRIMARY KEY, 
USR_ID INTEGER, 
ACCOUNT_TYPE_ID INTEGER,  
BALANCE DOUBLE PRECISION 
); 
/

CREATE TABLE ACCOUNT_TYPE ( 
ACCOUNT_TYPE_ID INTEGER PRIMARY KEY, 
ACCOUNT_TYPE_NAME VARCHAR2(100)
); 
/


CREATE TABLE ACTIVITY ( 
ACTIVITY_ID INTEGER PRIMARY KEY, 
BANK_ACCOUNT_ID INTEGER,
ACTIVITY_TYPE_ID INTEGER, 
TX_DATE DATE,
TX_DESCRIPTION VARCHAR2(100)
); 
/


CREATE TABLE ACTIVITY_TYPE(
ACTIVITY_TYPE_ID INTEGER PRIMARY KEY, 
ACTIVITY_TYPE_NAME VARCHAR2(100)
); 
/

ALTER TABLE USR
ADD CONSTRAINT FK_USR_USR_TYPE
FOREIGN KEY(USR_TYPE_ID) REFERENCES USR_TYPE(USR_TYPE_ID); 

ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT FK_BANK_ACCOUNT_TYPE
FOREIGN KEY(ACCOUNT_TYPE_ID) REFERENCES ACCOUNT_TYPE(ACCOUNT_TYPE_ID); 

ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT FK_BANK_ACCOUNT_USR
FOREIGN KEY(USR_ID) REFERENCES USR(USR_ID); 

ALTER TABLE ACTIVITY
ADD CONSTRAINT FK_ACTIVITY_BANK_ACCOUNT
FOREIGN KEY(BANK_ACCOUNT_ID) REFERENCES BANK_ACCOUNT(BANK_ACCOUNT_ID);

ALTER TABLE ACTIVITY
ADD CONSTRAINT FK_ACTIVITY_ACTIVITY_TYPE
FOREIGN KEY(ACTIVITY_TYPE_ID) REFERENCES ACTIVITY_TYPE(ACTIVITY_TYPE_ID);

-- * * * Put someone in some date for testing * * * 

INSERT INTO USR_TYPE VALUES (1, 'standard'); 
INSERT INTO USR_TYPE VALUES (2, 'super');

INSERT INTO ACCOUNT_TYPE VALUES (1, 'checking'); 
INSERT INTO ACCOUNT_TYPE VALUES (2, 'savings');

INSERT INTO ACTIVITY_TYPE VALUES(1, 'credit'); 

INSERT INTO ACTIVITY_TYPE VALUES(2, 'debit'); 


INSERT INTO USR VALUES (1, 'Bob', 'Jones', 'BJones','p@ssword',1); 
INSERT INTO USR VALUES (2, 'Tim', 'Jones', 'TJones','p*ssword',1); 
INSERT INTO USR VALUES (3, 'Steve', 'Smith', 'SSmith','p#ssword',1);
INSERT INTO USR VALUES (4, 'Jane', 'Johnson', 'JJohnson','p$ssword',2);

INSERT INTO BANK_ACCOUNT VALUES (1, 1, 1, 10); 
INSERT INTO BANK_ACCOUNT VALUES (2, 2, 1, 25); 
INSERT INTO BANK_ACCOUNT VALUES (3, 3, 2, 50); 
INSERT INTO BANK_ACCOUNT VALUES (4, 4, 1, 75); 


-- Sequence and triggers ---

--sequnece and trigger for usr 
CREATE SEQUENCE SQ_USR_PK
START WITH 5
INCREMENT BY 1; 
/ 

CREATE OR REPLACE TRIGGER TR_INSERT_USR
BEFORE INSERT ON USR 
FOR EACH ROW 
BEGIN 
    SELECT SQ_USR_PK.NEXTVAL INTO: NEW.USR_ID FROM  DUAL; 
END; 
/ 

-- Test for sequence and trigger for usrs ---
INSERT INTO USR(FIRSTNAME,LASTNAME, USERNAME, PASSWORD, USR_TYPE_ID)
VALUES ('Janet', 'Johnson', 'JanJohnson','p%ssword',2);
/ 

--sequence and trigger for bank account  
CREATE SEQUENCE SQ_BANK_ACCOUNT_PK
START WITH 5
INCREMENT BY 1; 
/ 

CREATE OR REPLACE TRIGGER TR_INSERT_BANK_ACCOUNT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW 
BEGIN 
    SELECT SQ_BANK_ACCOUNT_PK.NEXTVAL INTO: NEW.BANK_ACCOUNT_ID FROM  DUAL; 
END; 
/ 

 --test sequence and trigger for bank accounts 
INSERT INTO BANK_ACCOUNT(USR_ID, ACCOUNT_TYPE_ID, BALANCE)
VALUES (5, 2, 100);
/ 
 

-- sequence and triggers for activity table
-- sequence
CREATE SEQUENCE SQ_ACTIVITY_PK
START WITH 1
INCREMENT BY 1; 
/ 

-- trigger

CREATE OR REPLACE TRIGGER TR_UPDATE_BANK_ACCOUNT
AFTER UPDATE ON BANK_ACCOUNT
FOR EACH ROW 
BEGIN 
    INSERT INTO ACTIVITY(ACTIVITY_ID, TX_DATE)
    VALUES (SQ_ACTIVITY_PK.NEXTVAL, CURRENT_DATE); 
    --SELECT SQ_ACTIVITY_PK.NEXTVAL INTO: NEW.ACTIVITY_ID FROM  DUAL; 
    --SELECT BANK_ACCOUNT.BALANCE INTO 
    -- from Java, we need some code here 
END; 
/ 

-- test for incrementing statement records 
UPDATE BANK_ACCOUNT 
SET BALANCE = 30
WHERE USR_ID = 1; 
/ 
/*
UPDATE ACTIVITY 
SET SET BANK_ACCOUNT_ID = BANK_ACCOUNT.BANK_ACCOUNT_ID
WHERE  BANK_ACCOUNT.BANK_ACCOUNT_ID = 1; 
*/
/*
CREATE TABLE ACTIVITY ( 
ACTIVITY_ID INTEGER PRIMARY KEY, 
BANK_ACCOUNT_ID INTEGER,
ACTIVITY_TYPE_ID INTEGER, 
TX_DATE DATE,
TX_DESCRIPTION VARCHAR2(100)
); 
/
*/ 
-- trigger to commit deposit and withdrawals 

CREATE OR REPLACE TRIGGER TR_UPDATE_BANK_ACCOUNT
AFTER UPDATE ON BANK_ACCOUNT
FOR EACH ROW 
BEGIN 
   COMMIT;  
END; 
/ 
